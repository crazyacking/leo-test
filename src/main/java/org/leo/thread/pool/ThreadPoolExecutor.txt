同时从别的博客摘录了点一下内容：
一，该类的构造方法
public ThreadPoolExecutor(    
             int corePoolSize,    
             int maximumPoolSize,    
             long keepAliveTime,    
             TimeUnit unit,    
             BlockingQueue workQueue)   
参数说明：
     corePoolSize 指的是保留的线程池大小。
     maximumPoolSize 指的是线程池的最大大小。
     keepAliveTime 指的是空闲线程结束的超时时间。
     unit 是一个枚举，表示 keepAliveTime 的单位。
     workQueue 表示存放任务的队列。
二，线程池的工作过程如下
1、线程池刚创建时，里面没有一个线程。任务队列是作为参数传进来的。不过，就算队列里面有任务，线程池也不会马上执行它们。
 2、当调用 execute() 方法添加一个任务时，线程池会做如下判断：
     a. 如果正在运行的线程数量小于 corePoolSize，那么马上创建线程运行这个任务；
     b. 如果正在运行的线程数量大于或等于 corePoolSize，那么将这个任务放入队列。
     c. 如果这时候队列满了，而且正在运行的线程数量小于 maximumPoolSize，那么还是要创建线程运行这个任务；
     d. 如果队列满了，而且正在运行的线程数量大于或等于 maximumPoolSize，那么线程池会抛出异常，告诉调用者“我不能再接受任务了”。
 3、当一个线程完成任务时，它会从队列中取下一个任务来执行。
 4、当一个线程无事可做，超过一定的时间（keepAliveTime）时，线程池会判断，如果当前运行的线程数大于 corePoolSize，那么这个线程就被停掉。所以线程池的所有任务完成后，它最终会收缩到 corePoolSize 的大小。
 这样的过程说明，并不是先加入任务就一定会先执行。假设队列大小为 10，corePoolSize 为 3，maximumPoolSize 为 6，那么当加入 20 个任务时，执行的顺序就是这样的：首先执行任务 1、2、3，然后任务 4~13 被放入队列。这时候队列满了，任务 14、15、16 会被马上执行，而任务 17~20 则会抛出异常。最终顺序是：1、2、3、14、15、16、4、5、6、7、8、9、10、11、12、13。

注意：
    1、BlockingQueue 只是一个接口，常用的实现类有 LinkedBlockingQueue 和 ArrayBlockingQueue。用 LinkedBlockingQueue 的好处在于没有大小限制。这样的话，因为队列不会满，所以 execute() 不会抛出异常，而线程池中运行的线程数也永远不会超过 corePoolSize 个，keepAliveTime 参数也就没有意义了。
     2、shutdown() 方法不会阻塞。调用 shutdown() 方法之后，主线程就马上结束了，而线程池会继续运行直到所有任务执行完才会停止。如果不调用 shutdown() 方法，那么线程池会一直保持下去，以便随时添加新的任务。

java.util.concurrent.ThreadPoolExecutor 类提供了丰富的可扩展性。你可以通过创建它的子类来自定义它的行为。例如，我希望当每个任务结束之后打印一条消息，但我又无法修改任务对象，那么我可以这样写：
ThreadPoolExecutor executor = new ThreadPoolExecutor(size, maxSize, 1, TimeUnit.DAYS, queue) { 
     @Override 
     protected void afterExecute(Runnable r, Throwable t) { 
         System.out.println("Task finished."); 
     } 
 };
 
 
 
 
 